Turbo Assembler	 Version 4.1	    02/24/25 14:20:59	    Page 1
valent~1.asm



      1	0000			     .model tiny
      2	0000			     .data
      3	0000  31 32 33 34 35 36	37+	 ramka db '123456789', 0c9h, 0cdh, 0bbh, 0bah, 20h, 0bah, 0c8h,	0cdh, 0bch
      4	      38 39 C9 CD BB BA	20+
      5	      BA C8 CD BC
      6	0012  48 65 6C 6C 6F 20	52+	 string	db 'Hello RT!',	0
      7	      54 21 00
      8
      9	001C			     .code
     10				     org 100h
     11
     12	0100			     Start:
     13	0100  FC			 cld
     14
     15	0101  33 C9			 xor cx, cx
     16	0103  33 D2			 xor dx, dx
     17
     18	0105  E8 0029			 call readArguments
     19
     20	0108  50			 push ax
     21	0109  E8 0091			 call alignToCenter
     22	010C  58			 pop ax
     23
     24	010D  E8 00AE			 call drawFrame
     25
     26	0110  BE 0012r			 lea si, [string]    ; в ds:si положил адрес строки с надписью
     27	0113  33 C9			 xor cx, cx
     28	0115  B9 0009			 mov cx, 9	     ; в cx положил длину строки (перед	этим очистил)
     29	0118  33 D2			 xor dx, dx
     30	011A  BA 0001			 mov dx, 1	     ; в dx положил высоту строки (перед этим очистил)
     31	011D  B4 02			 mov ah, 00000010b   ; в ah положил цвет
     32
     33	011F  50			 push ax
     34	0120  E8 007A			 call alignToCenter
     35	0123  58			 pop ax
     36
     37	0124  E8 0071			 call drawTitle
     38
     39	0127  B4 4C			 mov ah, 4ch
     40	0129  CD 21			 int 21h
     41
     42	012B			     Error:
     43	012B  B0 01			 mov al, 1
     44	012D  B4 4C			 mov ah, 4ch
     45	012F  CD 21			 int 21h
     46
     47				     ;-----------------------------------------------------------
     48				     ; Считывает аргументы заданные в командной	строке
     49				     ; Entry: None
     50				     ; Exit : ds:si - адрес начала строки с элементами рамки
     51				     ;		 сl - ширина рамки
     52				     ;		 dl - высота рамки
     53				     ;		 ah - цвет
     54				     ; Destr: ds, di, cx, dx, ax
     55				     ;-----------------------------------------------------------
     56
     57	0131			     readArguments   proc
Turbo Assembler	 Version 4.1	    02/24/25 14:20:59	    Page 2
valent~1.asm



     58	0131  BE 0081			 mov si, 81h
     59	0134  AC			 lodsb
     60	0135  3C 0D			 cmp al, 0dh
     61	0137  74 F2			 je Error
     62
     63	0139  E8 001D			 call readNumber
     64	013C  8A CB			 mov cl, bl	 ; Положил в cl	ширину рамки
     65
     66	013E  E8 0018			 call readNumber
     67	0141  8A D3			 mov dl, bl	 ; Положил в dl	высоту рамки
     68
     69	0143  E8 0013			 call readNumber
     70	0146  8A EB			 mov ch, bl	 ; Положил в ch	цвет рамки
     71
     72	0148  E8 000E			 call readNumber ; Определил номер стиля рамки
     73	014B  B0 09			 mov al, 9
     74	014D  F6 E3			 mul bl
     75	014F  BE 0000r			 lea si, [ramka] ; в ds:si положил адрес строки	с символами рамки
     76	0152  03 F0			 add si, ax	 ; Передвинул указатель	на нужный стиль	рамки
     77
     78	0154  8A E5			 mov ah, ch ; Переместил цвет рамки из ch в ah
     79	0156  32 ED			 xor ch, ch ; Очистил ch
     80
     81	0158  C3			 ret
     82	0159				 endp
     83
     84				     ;-----------------------------------------------------------
     85				     ; Считывает строку	из памяти и преобразует	её в число
     86				     ; Entry: ds:si - адрес начала строки
     87				     ; Exit :	 bl - считанное	число
     88				     ; Destr: si, bl, al
     89				     ;-----------------------------------------------------------
     90
     91	0159			     readNumber	 proc
     92	0159  AC			 lodsb
     93	015A  E8 0023			 call numberConversion
     94	015D  8A D8			 mov bl, al
     95
     96	015F  AC			 lodsb
     97	0160  E8 0011			 call checkForSpace
     98	0163  72 0E			 jb EndRead
     99
    100	0165  E8 0018			 call numberConversion
    101	0168  D0 E3 D0 E3 D0 E3	D0+	 shl bl, 4
    102	      E3
    103	0170  02 D8			 add bl, al
    104	0172  AC			 lodsb
    105
    106	0173				 EndRead:
    107	0173  C3			     ret
    108	0174				 endp
    109
    110				     ;-----------------------------------------------------------
    111				     ; Проверяет является ли значение al ASCII-кодом пробела
    112				     ; Entry: al - ASCII-код символа
    113				     ; Exit : cf - 1 если да и 0 если нет
    114				     ; Destr:
Turbo Assembler	 Version 4.1	    02/24/25 14:20:59	    Page 3
valent~1.asm



    115				     ;-----------------------------------------------------------
    116
    117	0174			     checkForSpace  proc
    118	0174  3C 20			 cmp al, ' '
    119	0176  74 06			 je ThisIsSpace
    120	0178  3C 0D			 cmp al, 0dh
    121	017A  74 02			 je ThisIsSpace
    122
    123	017C  F8			 clc
    124	017D  C3			 ret
    125
    126	017E				 ThisIsSpace:
    127	017E  F9			     stc
    128	017F  C3			     ret
    129	0180				 endp
    130
    131				     ;-----------------------------------------------------------
    132				     ; Преобразует ASCII-код символа из	al в число
    133				     ; Entry: al - ASCII-код символа
    134				     ; Exit : al - число
    135				     ; Destr:
    136				     ;-----------------------------------------------------------
    137
    138	0180			     numberConversion  proc
    139	0180  3C 30			 cmp al, '0'
    140	0182  72 A7			 jb Error
    141
    142	0184  3C 39			 cmp al, '9'
    143	0186  72 08			 jb DecimalNumber
    144
    145	0188  3C 41			 cmp al, 'A'
    146	018A  72 9F			 jb Error
    147
    148	018C  3C 46			 cmp al, 'F'
    149	018E  72 03			 jb HexadecimalNumber
    150
    151	0190				 DecimalNumber:
    152	0190  2C 30			     sub al, '0'
    153	0192  C3			     ret
    154
    155	0193				 HexadecimalNumber:
    156	0193  2C 41			     sub al, 'A'
    157	0195  04 0A			     add al, 10
    158	0197  C3			     ret
    159	0198				 endp
    160
    161				     ;-----------------------------------------------------------
    162				     ; Выводит на экран	строку заданной	длинны,	заданного цвета
    163				     ; с заданным смещением
    164				     ; Entry: ds:si - адрес в памяти строки
    165				     ;		 ah - цвет надписи
    166				     ;		 di - смещение
    167				     ;		 cx - длина надписи
    168				     ; Exit : None
    169				     ; Destr: si, di, cx
    170				     ;-----------------------------------------------------------
    171
Turbo Assembler	 Version 4.1	    02/24/25 14:20:59	    Page 4
valent~1.asm



    172	0198			     drawTitle	 proc
    173	0198				 WriteByCharacter:
    174	0198  AC			     lodsb
    175	0199  AB			     stosw
    176	019A  E2 FC			     loop WriteByCharacter
    177
    178	019C  C3			 ret
    179	019D				 endp
    180
    181				     ;-----------------------------------------------------------
    182				     ; Высчитывает отступ для расположения рамки определённого
    183				     ; размера по центру экрана	(80 * 25)
    184				     ; Entry: cx - ширина рамки
    185				     ;	      dx - высота рамки
    186				     ; Exit : di - смещение
    187				     ; Destr: ax, bl
    188				     ;-----------------------------------------------------------
    189
    190	019D			     alignToCenter   proc
    191	019D  33 FF			 xor di, di
    192
    193	019F  33 C0			 xor ax, ax
    194	01A1  B8 0019			 mov ax, 25  ; Кладём в	ax высоту экрана в строках
    195	01A4  2B C2			 sub ax, dx  ; Получаем	кол-во пустых строк
    196	01A6  D1 E8			 shr ax, 1   ; Получаем	половину пустых	строк (их и пропустим)
    197	01A8  B3 50			 mov bl, 80
    198	01AA  F6 E3			 mul bl	     ; Умножаем	на ширину экрана
    199	01AC  D1 E0			 shl ax, 1   ; Умножаем	ещё на два, так	как на каждый символ приходится	два байта в памяти
    200
    201	01AE  03 F8			 add di, ax
    202
    203	01B0  33 C0			 xor ax, ax
    204	01B2  B8 0050			 mov ax, 80  ; Кладём в	ах ширину экрана
    205	01B5  2B C1			 sub ax, cx  ; Находим кол-во пустых столбцов
    206	01B7  D1 E8			 shr ax, 1   ; Получаем	половину пустых	столбцов
    207	01B9  D1 E0			 shl ax, 1   ; Умножаем	ещё на два, так	как на каждый символ приходится	два байта в памяти
    208
    209	01BB  03 F8			 add di, ax
    210
    211	01BD  C3			 ret
    212	01BE				 endp
    213
    214				     ;-----------------------------------------------------------
    215				     ; Рисует рамку из заданных	символов, заданного размера и
    216				     ; цвета с заданным	отступом.
    217				     ; Entry: ds:si - адрес в памяти строки с рамкой
    218				     ;		 ah - цвет рамки
    219				     ;		 di - смещение
    220				     ;		 cx - ширина рамки
    221				     ;		 dx - высота рамки
    222				     ; Exit : None
    223				     ; Destr: al, bx, di, si, es
    224				     ;-----------------------------------------------------------
    225
    226	01BE			     drawFrame	 proc
    227	01BE  E8 001B			 call drawLine	 ; Рисую первую	линию рамки
    228
Turbo Assembler	 Version 4.1	    02/24/25 14:20:59	    Page 5
valent~1.asm



    229	01C1				 DrawMiddle:
    230	01C1  81 C7 00A0		     add di, 80	* 2  ; Делаю отступ
    231	01C5  E8 0014			     call drawLine   ; Рисую линию
    232	01C8  83 EE 03			     sub si, 3	     ; Возвращаю указатель на 4	символ рамки
    233
    234	01CB  4A			     dec dx
    235	01CC  83 FA 00			     cmp dx, 0
    236	01CF  75 F0			     jne DrawMiddle
    237
    238	01D1  81 C7 00A0		 add di, 80 * 2	 ; Отступаю до начала следующей	линии
    239	01D5  83 C6 03			 add si, 3	 ; Ставлю указатель на 7 символ	рамки
    240	01D8  E8 0001			 call drawLine	 ; Рисую последнюю линию
    241
    242	01DB  C3			 ret
    243	01DC				 endp
    244
    245				     ;-----------------------------------------------------------
    246				     ; Рисует строку из	символов (первый, последний и
    247				     ; промежуточные), с заданной длинной, цветом и отступом
    248				     ; Entry: ds:si - адрес в памяти строки с рамкой
    249				     ;		 ah - цвет рамки
    250				     ;		 di - смещение
    251				     ;		 cx - ширина рамки
    252				     ; Exit : None
    253				     ; Destr: al, bx, si, es
    254				     ;-----------------------------------------------------------
    255
    256
    257	01DC			     drawLine	 proc
    258	01DC  51			 push cx
    259	01DD  57			 push di
    260	01DE  BB B800			 mov bx, 0b800h
    261	01E1  8E C3			 mov es, bx
    262
    263	01E3  AC			 lodsb	 ; Загрузил в al первый	символ рамки
    264	01E4  AB			 stosw	 ; В видеопамять положил значение из ax
    265
    266	01E5  AC			 lodsb	 ; Загрузил в al второй	символ рамки
    267	01E6  F3> AB			 rep stosw   ; В видеопамять cx	символов из ax
    268
    269	01E8  AC			 lodsb	 ; Загрузил в al последний символ рамки
    270	01E9  AB			 stosw	 ; В видеопамять положил значение из ax
    271
    272	01EA  5F			 pop di
    273	01EB  59			 pop cx
    274	01EC  C3			 ret
    275	01ED				 endp
    276
    277				     end Start
Turbo Assembler	 Version 4.1	    02/24/25 14:20:59	    Page 6
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/24/25"
??FILENAME			  Text	 "valent~1"
??TIME				  Text	 "14:20:59"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 VALENT~1
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ALIGNTOCENTER			  Near	 DGROUP:019D
CHECKFORSPACE			  Near	 DGROUP:0174
DECIMALNUMBER			  Near	 DGROUP:0190
DRAWFRAME			  Near	 DGROUP:01BE
DRAWLINE			  Near	 DGROUP:01DC
DRAWMIDDLE			  Near	 DGROUP:01C1
DRAWTITLE			  Near	 DGROUP:0198
ENDREAD				  Near	 DGROUP:0173
ERROR				  Near	 DGROUP:012B
HEXADECIMALNUMBER		  Near	 DGROUP:0193
NUMBERCONVERSION		  Near	 DGROUP:0180
RAMKA				  Byte	 DGROUP:0000
READARGUMENTS			  Near	 DGROUP:0131
READNUMBER			  Near	 DGROUP:0159
START				  Near	 DGROUP:0100
STRING				  Byte	 DGROUP:0012
THISISSPACE			  Near	 DGROUP:017E
WRITEBYCHARACTER		  Near	 DGROUP:0198

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  001C Word	  Public  DATA
  _TEXT				  16  01ED Word	  Public  CODE
